--- serf/src/buckets/headers_buckets.c	2012-08-27 12:37:05.154207000 -0400
+++ src/third_party/serf/instaweb_headers_buckets.c	2012-08-28 10:24:22.597451000 -0400
@@ -163,11 +163,11 @@
                    be comma-separated, that is clearly the correct behavior;
                    for others, the correct behavior is undefined anyway. */
 
-                /* The "+1" is for the comma; serf_bstrmemdup() will also add
-                   one slot for the terminating '\0'. */
+                /* The "+1" is for the comma; the +1 in the alloc
+                   call is for the terminating '\0' */
                 apr_size_t new_size = found->value_size + value_size + 1;
                 char *new_val = serf_bucket_mem_alloc(headers_bucket->allocator,
-                                                      new_size);
+                                                      new_size + 1);
                 memcpy(new_val, val, value_size);
                 new_val[value_size] = ',';
                 memcpy(new_val + value_size + 1, found->value,
@@ -322,7 +322,7 @@
                                       const char **data, apr_size_t *len)
 {
     headers_context_t *ctx = bucket->data;
-    apr_size_t avail;
+    apr_size_t avail = 0;
 
     select_value(ctx, data, &avail);
     if (ctx->state == READ_DONE)
@@ -382,9 +382,9 @@
     *vecs_used = 0;
 
     for (i = 0; i < vecs_size; i++) {
-        const char *data;
-        apr_size_t len;
-        apr_status_t status;
+        const char *data = NULL;
+        apr_size_t len = 0;
+        apr_status_t status = 0;
 
         /* Calling read() would not be a safe opt in the general case, but it
          * is here for the header bucket as it only frees all of the header
--- serf/src/buckets/response_buckets.c	2012-08-27 12:37:05.167214000 -0400
+++ src/third_party/serf/instaweb_response_buckets.c	2012-08-28 11:08:35.275683000 -0400
@@ -241,45 +241,58 @@
             ctx->body =
                 serf_bucket_barrier_create(ctx->stream, bkt->allocator);
 
+            /*
+             * Instaweb/mod_pagespeed change: This section is
+             * re-ordered from the original code from serf to Follow
+             * HTTP spec by checking "Transfer-Encoding: chunked",
+             * before "Content-Length".
+             */
+
             /* Are we C-L, chunked, or conn close? */
-            v = serf_bucket_headers_get(ctx->headers, "Content-Length");
-            if (v) {
-                apr_uint64_t length;
-                length = apr_strtoi64(v, NULL, 10);
-                if (errno == ERANGE) {
-                    return APR_FROM_OS_ERROR(ERANGE);
-                }
-                ctx->body = serf_bucket_limit_create(ctx->body, length,
-                                                     bkt->allocator);
+            v = serf_bucket_headers_get(ctx->headers, "Transfer-Encoding");
+
+            /* Need to handle multiple transfer-encoding. */
+            if (v && strcasecmp("chunked", v) == 0) {
+                ctx->chunked = 1;
+                ctx->body = serf_bucket_dechunk_create(ctx->body,
+                                                       bkt->allocator);
             }
             else {
-                v = serf_bucket_headers_get(ctx->headers, "Transfer-Encoding");
-
-                /* Need to handle multiple transfer-encoding. */
-                if (v && strcasecmp("chunked", v) == 0) {
-                    ctx->chunked = 1;
-                    ctx->body = serf_bucket_dechunk_create(ctx->body,
-                                                           bkt->allocator);
+                v = serf_bucket_headers_get(ctx->headers, "Content-Length");
+                if (v) {
+                    apr_uint64_t length;
+                    length = apr_strtoi64(v, NULL, 10);
+                    if (errno == ERANGE) {
+                        return APR_FROM_OS_ERROR(ERANGE);
+                    }
+                    ctx->body = serf_bucket_limit_create(ctx->body, length,
+                                                         bkt->allocator);
                 }
-
-                if (!v && (ctx->sl.code == 204 || ctx->sl.code == 304)) {
+                else if ((ctx->sl.code == 204 || ctx->sl.code == 304)) {
                     ctx->state = STATE_DONE;
                 }
             }
-            v = serf_bucket_headers_get(ctx->headers, "Content-Encoding");
-            if (v) {
-                /* Need to handle multiple content-encoding. */
-                if (v && strcasecmp("gzip", v) == 0) {
-                    ctx->body =
-                        serf_bucket_deflate_create(ctx->body, bkt->allocator,
-                                                   SERF_DEFLATE_GZIP);
-                }
-                else if (v && strcasecmp("deflate", v) == 0) {
-                    ctx->body =
-                        serf_bucket_deflate_create(ctx->body, bkt->allocator,
-                                                   SERF_DEFLATE_DEFLATE);
-                }
-            }
+
+            /*
+             * Instaweb would prefer to receive gzipped output if that's what
+             * was asked for.
+             *
+             * v = serf_bucket_headers_get(ctx->headers, "Content-Encoding");
+             * if (v) {
+             *   * Need to handle multiple content-encoding. *
+             *  if (v && strcasecmp("gzip", v) == 0) {
+             *      ctx->body =
+             *          serf_bucket_deflate_create(ctx->body, bkt->allocator,
+             *                                     SERF_DEFLATE_GZIP);
+             *  }
+             *  else if (v && strcasecmp("deflate", v) == 0) {
+             *      ctx->body =
+             *          serf_bucket_deflate_create(ctx->body, bkt->allocator,
+             *                                     SERF_DEFLATE_DEFLATE);
+             *  }
+             * }
+             */
+
             /* If we're a HEAD request, we don't receive a body. */
             if (ctx->head_req) {
                 ctx->state = STATE_DONE;
--- serf/src/outgoing.c	2012-08-27 12:32:19.482962000 -0400
+++ src/third_party/serf/instaweb_outgoing.c	2012-08-28 10:53:12.613044000 -0400
@@ -823,6 +823,8 @@
      * This permits older Serf apps to still handle authentication
      * themselves by not registering credential callbacks.
      */
+
+#if 0 /* This disables authentication support for now */
     if (request->conn->ctx->cred_cb) {
       status = serf__handle_auth_response(&consumed_response,
                                           request,
@@ -841,6 +843,7 @@
           return status;
       }
     }
+#endif
 
     if (!consumed_response) {
         return (*request->handler)(request,
@@ -1158,12 +1161,21 @@
     serf_connection_t *c;
     apr_sockaddr_t *host_address;
 
-    /* Parse the url, store the address of the server. */
-    status = apr_sockaddr_info_get(&host_address,
-                                   host_info.hostname,
-                                   APR_UNSPEC, host_info.port, 0, pool);
-    if (status)
-        return status;
+    /*
+     * Instaweb/mod_pagespeed change: Do not lookup IP of destination host when
+     * using a proxy.
+     */
+    if (ctx->proxy_address) {
+        host_address = ctx->proxy_address;
+        status = APR_SUCCESS;
+    } else {
+        /* Parse the url, store the address of the server. */
+        status = apr_sockaddr_info_get(&host_address,
+                                       host_info.hostname,
+                                       APR_UNSPEC, host_info.port, 0, pool);
+        if (status)
+            return status;
+    }
 
     c = serf_connection_create(ctx, host_address, setup, setup_baton,
                                closed, closed_baton, pool);
@@ -1213,6 +1225,19 @@
                 conn->stream = NULL;
             }
 
+            /*
+             * Added for mod_pagespeed (aka instaweb):
+             *
+             * Destroy the ostream_head to eliminate memory leak in HTTPS
+             * fetches, as found in mod_pagespeed's unit tests.  Note that
+             * there is an ->ostream_tail as well, but destroying that causes
+             * unit tests to abort in the allocator.
+             */
+            if (conn->ostream_head != NULL) {
+                serf_bucket_destroy(conn->ostream_head);
+                conn->ostream_head = NULL;
+            }
+
             /* Remove the connection from the context. We don't want to
              * deal with it any more.
              */
@@ -1235,6 +1260,19 @@
     return APR_NOTFOUND;
 }
 
+/*
+ * Instaweb/mod_pagespeed added API: Returns true if this connection
+ * has had error events reported during the last call to
+ * serf_context_run. It should be called after serf_context_run
+ * invocation, and not within callbacks.
+ *
+ * Return value is conceptually bool, but Serf implementation language is C.
+*/
+int serf_connection_is_in_error_state(serf_connection_t* conn)
+{
+  return ((conn->seen_in_pollset & (APR_POLLERR | APR_POLLHUP)) != 0);
+}
+
 
 void serf_connection_set_max_outstanding_requests(
     serf_connection_t *conn,
@@ -1395,12 +1433,18 @@
 }
 
 
-serf_bucket_t *serf_request_bucket_request_create(
+/*
+ * Instaweb/mod_pagespeed customization: Add
+ * serf_request_bucket_request_create_for_host which lets Host: be set
+ * separately from the URL.
+ */
+serf_bucket_t *serf_request_bucket_request_create_for_host(
     serf_request_t *request,
     const char *method,
     const char *uri,
     serf_bucket_t *body,
-    serf_bucket_alloc_t *allocator)
+    serf_bucket_alloc_t *allocator,
+    const char* host)
 {
     serf_bucket_t *req_bkt, *hdrs_bkt;
     serf_connection_t *conn = request->conn;
@@ -1413,9 +1457,10 @@
     if (ctx->proxy_address && conn->host_url)
         serf_bucket_request_set_root(req_bkt, conn->host_url);
 
-    if (conn->host_info.hostinfo)
-        serf_bucket_headers_setn(hdrs_bkt, "Host",
-                                 conn->host_info.hostinfo);
+    if (host == NULL)
+        host = request->conn->host_info.hostname;
+    if (host)
+        serf_bucket_headers_setn(hdrs_bkt, "Host", host);
 
     /* Setup server authorization headers */
     if (ctx->authn_info.scheme)
@@ -1429,3 +1474,14 @@
 
     return req_bkt;
 }
+
+serf_bucket_t *serf_request_bucket_request_create(
+    serf_request_t *request,
+    const char *method,
+    const char *uri,
+    serf_bucket_t *body,
+    serf_bucket_alloc_t *allocator)
+{
+    return serf_request_bucket_request_create_for_host(
+        request, method, uri, body, allocator, NULL);
+}
