%{
// rewrite_option_names.cc is automatically generated from
// rewrite_option_names.gperf.
// Author: jmarantz@google.com, sriharis@google.com

#include "base/basictypes.h"
#include "net/instaweb/rewriter/public/rewrite_options.h"
#include "net/instaweb/util/public/string_util.h"

namespace net_instaweb {
%}
%compare-strncmp
%define class-name OptionMapper
%define lookup-function-name Lookup
%define word-array-name kOptionNameTable
%global-table
%ignore-case
%includes
%language=C++
%readonly-tables
%struct-type

struct OptionName {
  const char* name;
  net_instaweb::RewriteOptions::OptionEnum option_enum;
};
%%
"AboveTheFoldCacheTime",                RewriteOptions::kAboveTheFoldCacheTime
"AboveTheFoldNonCacheableElements",     RewriteOptions::kAboveTheFoldNonCacheableElements
"AjaxRewritingEnabled",                 RewriteOptions::kAjaxRewritingEnabled
"AlwaysRewriteCss",                     RewriteOptions::kAlwaysRewriteCss
"AnalyticsID",                          RewriteOptions::kAnalyticsID
"BeaconUrl",                            RewriteOptions::kBeaconUrl
"BotdetectEnabled",                     RewriteOptions::kBotdetectEnabled
"CombineAcrossPaths",                   RewriteOptions::kCombineAcrossPaths
"CriticalImagesCacheExpirationTimeMs",  RewriteOptions::kCriticalImagesCacheExpirationTimeMs
"CssImageInlineMaxBytes",               RewriteOptions::kCssImageInlineMaxBytes
"CssInlineMaxBytes",                    RewriteOptions::kCssInlineMaxBytes
"CssOutlineMinBytes",                   RewriteOptions::kCssOutlineMinBytes
"DefaultCacheHtml",                     RewriteOptions::kDefaultCacheHtml
"EnableBlink",                          RewriteOptions::kEnableBlink
"FlushHtml",                            RewriteOptions::kFlushHtml
"IdleFlushTimeMs",                      RewriteOptions::kIdleFlushTimeMs
"ImageInlineMaxBytes",                  RewriteOptions::kImageInlineMaxBytes
"ImageJpegNumProgressiveScans",         RewriteOptions::kImageJpegNumProgressiveScans
"ImageLimitOptimizedPercent",           RewriteOptions::kImageLimitOptimizedPercent
"ImageLimitResizeAreaPercent",          RewriteOptions::kImageLimitResizeAreaPercent
"ImageMaxRewritesAtOnce",               RewriteOptions::kImageMaxRewritesAtOnce
"ImageRetainColorProfile",              RewriteOptions::kImageRetainColorProfile
"ImageRetainExifData",                  RewriteOptions::kImageRetainExifData
"ImageWebpRecompressQuality",           RewriteOptions::kImageWebpRecompressQuality
"ImplicitCacheTtlMs",                   RewriteOptions::kImplicitCacheTtlMs
"JpegRecompressionQuality",             RewriteOptions::kImageJpegRecompressionQuality
"JsInlineMaxBytes",                     RewriteOptions::kJsInlineMaxBytes
"JsOutlineMinBytes",                    RewriteOptions::kJsOutlineMinBytes
"LazyloadImagesAfterOnload",            RewriteOptions::kLazyloadImagesAfterOnload
"LogRewriteTiming",                     RewriteOptions::kLogRewriteTiming
"LowercaseHtmlNames",                   RewriteOptions::kLowercaseHtmlNames
"MaxHtmlCacheTimeMs",                   RewriteOptions::kMaxHtmlCacheTimeMs
"MaxInlinedPreviewImagesIndex",         RewriteOptions::kMaxInlinedPreviewImagesIndex
"MaxUrlSegmentSize",                    RewriteOptions::kMaxUrlSegmentSize
"MaxUrlSize",                           RewriteOptions::kMaxUrlSize
"MinImageSizeLowResolutionBytes",       RewriteOptions::kMinImageSizeLowResolutionBytes
"MinResourceCacheTimeToRewriteMs",      RewriteOptions::kMinResourceCacheTimeToRewriteMs
"ModifyCachingHeaders",                 RewriteOptions::kModifyCachingHeaders
"PercentExperimentTraffic",             RewriteOptions::kFuriousPercent
"ProgressiveJpegMinBytes",              RewriteOptions::kProgressiveJpegMinBytes
"RespectVary",                          RewriteOptions::kRespectVary
"RewriteLevel",                         RewriteOptions::kRewriteLevel
"RunExperiment",                        RewriteOptions::kRunningFurious
"ServeBlinkNonCritical",                RewriteOptions::kServeBlinkNonCritical
"ServeStaleIfFetchError",               RewriteOptions::kServeStaleIfFetchError
// The following are Apache specific options.
"CollectRefererStatistics",             RewriteOptions::kCollectRefererStatistics
"FetchProxy",                           RewriteOptions::kFetcherProxy
"FetcherTimeOutMs",                     RewriteOptions::kFetcherTimeOutMs
"FileCacheCleanIntervalMs",             RewriteOptions::kFileCacheCleanIntervalMs
"FileCachePath",                        RewriteOptions::kFileCachePath
"FileCacheSizeKb",                      RewriteOptions::kFileCacheCleanSizeKb
"GeneratedFilePrefix",                  RewriteOptions::kFileNamePrefix
"HashRefererStatistics",                RewriteOptions::kHashRefererStatistics
"LRUCacheByteLimit",                    RewriteOptions::kLruCacheByteLimit
"LRUCacheKbPerProcess",                 RewriteOptions::kLruCacheKbPerProcess
"RefererStatisticsOutputLevel",         RewriteOptions::kRefererStatisticsOutputLevel
"SharedMemoryLocks",                    RewriteOptions::kUseSharedMemLocking
"SlurpDirectory",                       RewriteOptions::kSlurpDirectory
"SlurpFlushLimit",                      RewriteOptions::kSlurpFlushLimit
"SlurpReadOnly",                        RewriteOptions::kSlurpReadOnly
"Statistics",                           RewriteOptions::kStatisticsEnabled
"TestProxy",                            RewriteOptions::kTestProxy
"DomainRewriteAllTags",                 RewriteOptions::kDomainRewriteAllTags
%%

RewriteOptions::OptionEnum RewriteOptions::LookupOption(
    const StringPiece& option_name) {
  const OptionName* entry = OptionMapper::Lookup(
      option_name.data(), option_name.size());
  if (entry != NULL) {
    return entry->option_enum;
  }
  return RewriteOptions::kEndOfOptions;
}

void RewriteOptions::InitOptionEnumToNameArray() {
  // We assume that all entries of option_enum_to_name_array_ have been
  // initialized to NULL.
  int num_entries = arraysize(kOptionNameTable);
  for (int i = 0; i < num_entries; ++i) {
    const char* name = kOptionNameTable[i].name;
    if ((name != NULL) && (*name != '\0') &&
        (kOptionNameTable[i].option_enum < kEndOfOptions)) {
      option_enum_to_name_array_[kOptionNameTable[i].option_enum] = name;
    }
  }
}

}  // namespace net_instaweb
