# This is a sample configuration file for mod_pagespeed.  It must be edited by
# the installer to provide the correct HOSTNAME under ModPagespeedUrlPrefix.
#
# This sample config file also turns on "gzip" for html, css, and javascript,
# which is generally best practice.

<IfModule pagespeed_module>
    # Direct Apache to send all HTML output to the mod_pagespeed output handler.
    # TODO(jmarantz): iterate and minimize this output filter arrangement with
    # the mod_deflate section below.
    SetOutputFilter MOD_PAGESPEED_OUTPUT_FILTER;DEFLATE

    # Give mod_pagespeed a chance to handle all requests.
    <Location />
          SetHandler mod_pagespeed_resource_generator
    </Location>

    # This page lets you view statistics about the mod_pagespeed module.
    <Location /mod_pagespeed_statistics>
        Order allow,deny
        # You may insert other "Allow from" lines to add hosts you want to
        # allow to look at generated statistics.  Another possibility is
        # to comment out the "Order" and "Allow" options from the config
        # file, to allow any client that can reach your server to examine
        # statistics.  This might be appropriate in an experimental setup or
        # if the Apache server is protected by a reverse proxy that will
        # filter URLs in some fashion.
        Allow from localhost
        SetHandler mod_pagespeed_statistics
    </Location>

    # This handles the client-side instrumentation callbacks which are injected
    # by the add_instrumentation filter.
    <Location /mod_pagespeed_beacon>
          SetHandler mod_pagespeed_beacon
    </Location>

    ModPagespeed on

    # TODO(jmaessen) This parameter will no longer be relevant once the new
    # resource naming spec is implemented.
    ModPagespeedUrlPrefix                "http://localhost/mod_pagespeed/"

    ModPagespeedFileCachePath            "/var/mod_pagespeed/cache/"
    ModPagespeedFileCacheSizeKb          102400
    ModPagespeedFileCacheCleanIntervalMs 3600000
    ModPagespeedGeneratedFilePrefix      "/var/mod_pagespeed/files/"
    ModPagespeedLRUCacheKbPerProcess     1024
    ModPagespeedLRUCacheByteLimit        16384
    ModPagespeedCssInlineMaxBytes        2048
    ModPagespeedImgInlineMaxBytes        2048
    ModPagespeedJsInlineMaxBytes         2048
    ModPagespeedOutlineThreshold         3000

    # The following rewrite passes are safe to run on most web pages.
    # Of course, any web page can examine itself using Javascript, and
    # may not expect any changes to be made by ModPagespeed.  However,
    # these passes have been shown to be robust over a large number of
    # web sites.
    #
    # Note that the order of the filters specified in the configuration file
    # does not matter -- mod_pagespeed applies the filters in a predefined
    # order.

    # Adds a 'head' element do the document if one is not supplied already.
    # Several other filters turn this on automatically even if it is not
    # specified explicitly.
    ModPagespeedRewriters add_head

    # Combines multiple heads into one.  Technically HTML documents
    # are not allowed to have multiple <head>s, but sites which
    # aggregate content from multiple sources sometimes have them.
    # This filter moves the content from later <head>s into the first
    # head.  This filter can change the order of content (e.g. CSS and
    # JS) in the later <head>s relative to intervening <body>
    # elements.
    # ModPagespeedRewriters combine_heads

    # Experimental filter to completely remove scripts from a page.  Obviously
    # this will break functionality, and is disabled by default.  This can be
    # used to facilitate timing tests showing the maximum benefits of improving
    # javascript.
    # ModPagespeedRewriters strip_scripts

    # Large blocks of inline Javascript and CSS can benefit from
    # moving into external files so they can be cached in the browser,
    # even if the HTML is not cacheable.  See
    # ModPagespeedOutlineThreshold.  These filters can currently only be
    # enabled in a single-server configuration.
    # TODO(jmarantz): test and enable these OR
    # TODO(abliss): these are included by default so that we can check
    # these filters in our system test.  Comment these out before ship.
    ModPagespeedRewriters outline_css,outline_javascript

    # Moves CSS elements into the <head>  This filter requires add_head.
    ModPagespeedRewriters move_css_to_head

    # Combines multiple CSS elements into one
    ModPagespeedRewriters combine_css

    # Rewrites Javscript and CSS files to remove excess whitespace and comments
    ModPagespeedRewriters rewrite_css,rewrite_javascript

    # Inlines small CSS and JS files into the HTML document.  See
    # ModPagespeedCssInlineMaxBytes
    ModPagespeedRewriters inline_css,inline_javascript

    # Optimizes images, re-encoding them for smaller byte-size, removing
    # excess pixels that will not be displayed, and inlining small images.
    # See ModPagespeedImgInlineMaxBytes
    ModPagespeedRewriters rewrite_images

    # Adds width/height attributes to <img> tags that lack them.
    ModPagespeedRewriters insert_img_dimensions

    # Removes comments in HTML files.  This is turned off by default to avoid
    # breaking common techniques for deferring javascript execution by running
    # javascript that searches the DOM for HTML comments.
    # TODO(abliss): these are included by default so that we can check
    # these filters in our system test.  Comment these out before ship.
    ModPagespeedRewriters remove_comments

    # Removes excess whitespace in HTML files (avoiding "pre",
    # "script", "style", and "textarea").  This is off by default as
    # it's possible to apply these tags to the DOM in a way that is
    # not statically detected.  If your web-site only uses those
    # attributes directly in HTML markup, and does not apply them via
    # CSS and javascript, then it's safe to enable this filter.
    # ModPagespeedRewriters collapse_whitespace

    # Removes attributes which are not significant according to the HTML spec.
    ModPagespeedRewriters elide_attributes

    # Finds all images, css, and javascript resources that are publically
    # cacheable for less than one month, and extend their cache lifetime to
    # one year.  This is safe because this transformation adds a content
    # hash to the URL so that if the content changes the URL will change, and
    # we will get the desired caching behavior.  All other filters that write
    # resources use the same content-hashing technique to allow safe caching
    # for one year.
    ModPagespeedRewriters extend_cache

    # Reduces the size of URLs by removing common prefixes with the HTML file.
    # TODO(jmarantz): turn this on by default
    # ModPagespeedRewriters left_trim_urls

    # Removes quotes around HTML attributes that are not lexically required
    ModPagespeedRewriters remove_quotes

    # Adds javascript at the beginning and end of the page to allow latency
    # information to be sent back to the server.  This information can be
    # viewed from a web browser from /mod_pagespeed_statistics
    ModPagespeedRewriters add_instrumentation

    # When Apache is set up as a browser proxy, mod_pagespeed can record
    # web-sites as they are requested, so that an image of the web is built
    # up in the directory of a users choosing.
    # SLURP_DIR_COMMAND
    # SLURP_READ_ONLY_COMMAND
</IfModule>
