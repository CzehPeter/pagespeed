# These caching headers are set up for the document root, and
# also serve as a demonstration of good values to set for the entire
# site, if it is to be optimized by mod_pagespeed.
<Directory "@@APACHE_DOC_ROOT@@/mod_pagespeed_example" >
  <IfModule headers_module>
    # To enable to show that mod_pagespeed to rewrites web pages, we must
    # turn off Etags for HTML files and eliminate caching altogether.
    # mod_pagespeed should rewrite HTML files each time they are served.
    # The first time mod_pagespeed sees an HTML file, it may not optimize
    # it fully.  It will optimize better after the second view.  Caching
    # defeats this behavior.
    <FilesMatch "\.(html|htm)$">
      Header unset Etag
      Header set Cache-control "max-age=0, no-cache"
    </FilesMatch>

    # Images, styles, and javascript are all cache-extended for
    # a year by rewriting URLs to include a content hash.  mod_pagespeed
    # can only do this if the resources are cacheable in the first place.
    # The origin caching policy, set here to 10 minutes, dictates how
    # frequently mod_pagespeed must re-read the content files and recompute
    # the content-hash.  As long as the content doesn't actually change,
    # the content-hash will remain the same, and the resources stored
    # in browser caches will stay relevant.
    <FilesMatch "\.(jpg|jpeg|gif|png|js|css)$">
      Header unset Etag
      Header set Cache-control "public, max-age=600"
    </FilesMatch>
  </IfModule>
</Directory>

<Directory "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/shard" >
  ModPagespeedShardDomain "@@APACHE_DOMAIN@@" shard1,shard2
  ModPagespeedRewriteLevel PassThrough
  ModPagespeedEnableFilters extend_cache
</Directory>

# add_instrumentation must be enabled so that we can test /mod_pagespeed_beacon.
ModPagespeedEnableFilters add_instrumentation

# Enable htaccess
<Directory "@@APACHE_DOC_ROOT@@/mod_pagespeed_example/" >
    AllowOverride All
</Directory>

<Directory "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/" >
    AllowOverride All
    # Some versions of mod_rewrite will refuse to do any work if
    # symlink handling is off.
    Options +SymLinksIfOwnerMatch
</Directory>

# This is needed for the server-side includes test in
# apache_system_test.sh.  See mod_pagespeed_test/ssi/.htaccess as well.
<IfModule !include_module>
  LoadModule include_module @@APACHE_MODULES@@/mod_include.so
</IfModule>
AddType text/html .shtml
AddOutputFilter INCLUDES .shtml

# For the mod_rewrite test in apache_system_test.sh
<IfModule !rewrite_module>
  LoadModule rewrite_module  @@APACHE_MODULES@@/mod_rewrite.so
</IfModule>

# For the vary: handling test
<IfModule !headers_module>
  LoadModule headers_module  @@APACHE_MODULES@@/mod_headers.so
</IfModule>

# Helps tests that extra headers supplied by the apache conf
# survive single-resource rewrites
#
# http://code.google.com/p/modpagespeed/issues/detail?id=324
Header append 'X-Extra-Header' '1'

# For regression test of connection failing.
ModPagespeedDomain www.google.co.ca:8085

# Test LoadFromFile mapping by mapping one dir to another.
ModPagespeedLoadFromFile "http://@@APACHE_DOMAIN@@/mod_pagespeed_test/load_from_file/web_dir/" "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/load_from_file/file_dir/"

#SPELING # Enable mod_speling to ensure that we don't regress Issue 194
#SPELING <IfModule !speling_module>
#SPELING   LoadModule speling_module  @@APACHE_MODULES@@/mod_speling.so
#SPELING </IfModule>
#SPELING CheckSpelling on

#STRESS # These lines are only needed for the stress test.
#STRESS <Directory "@@APACHE_DOC_ROOT@@/mod_pagespeed_example/cgi" >
#STRESS   Options +ExecCGI
#STRESS </Directory>
#STRESS AddHandler cgi-script .cgi

#REWRITE # These lines are only needed for the mod_rewrite test, where
#REWRITE # we are just trying to prove that we remove mod_rewrite from
#REWRITE # the request if the URL is going to be handled by mod_pagespeed.
#REWRITE Options +Indexes
#REWRITE RewriteEngine on
#REWRITE RewriteRule (.*).jpg.pagespeed.(.*).jpg /broken.jpg
#REWRITE RewriteRule mod_pagespeed_statistics /broken
#REWRITE RewriteRule shortcut.html /mod_pagespeed_example/index.html

#COVERAGE # These lines are used for large-scale code coverage testing.
#COVERAGE # We use 2 servers for it, one doing rewriting and fetching
#COVERAGE # from the other one, which plays back slurps
#COVERAGE Listen 8081
#COVERAGE <VirtualHost *:8080>
#COVERAGE   ModPagespeed on
#COVERAGE   # Proxy using SERF
#COVERAGE   ModPagespeedTestProxy on
#COVERAGE   ModPagespeedFetchProxy "127.0.0.1:8081"
#COVERAGE
#COVERAGE   ModPagespeedFileCachePath            "@@MODPAGESPEED_CACHE_ROOT@@/cache/"
#COVERAGE   ModPagespeedGeneratedFilePrefix      "@@MODPAGESPEED_CACHE_ROOT@@/files/"
#COVERAGE   ModPagespeedRewriteLevel AllFilters
#COVERAGE   ModPagespeedEnableFilters elide_attributes
#COVERAGE   ModPagespeedDomain *
#COVERAGE   ModPagespeedFileCacheSizeKb          102400
#COVERAGE   ModPagespeedFileCacheCleanIntervalMs 3600000
#COVERAGE   ModPagespeedLRUCacheKbPerProcess     1024
#COVERAGE   ModPagespeedLRUCacheByteLimit        16384
#COVERAGE   ModPagespeedCssInlineMaxBytes        2048
#COVERAGE   ModPagespeedImageInlineMaxBytes      2048
#COVERAGE   ModPagespeedJsInlineMaxBytes         2048
#COVERAGE   ModPagespeedCssOutlineMinBytes       3000
#COVERAGE   ModPagespeedJsOutlineMinBytes        3000
#COVERAGE   ModPagespeedImageMaxRewritesAtOnce      8
#COVERAGE   ModPagespeedSlurpFlushLimit          8192
#COVERAGE   <Location /mod_pagespeed_beacon>
#COVERAGE       SetHandler mod_pagespeed_beacon
#COVERAGE   </Location>
#COVERAGE   <Location /mod_pagespeed_statistics>
#COVERAGE       Order allow,deny
#COVERAGE       Allow from localhost
#COVERAGE       SetHandler mod_pagespeed_statistics
#COVERAGE   </Location>
#COVERAGE    ModPagespeedMessageBufferSize 100000
#COVERAGE    <Location /mod_pagespeed_message>
#COVERAGE        Allow from localhost
#COVERAGE        Allow from 127.0.0.1
#COVERAGE        SetHandler mod_pagespeed_message
#COVERAGE    </Location>
#COVERAGE </VirtualHost>
#COVERAGE
#COVERAGE <VirtualHost *:8081>
#COVERAGE   ModPagespeed on
#COVERAGE
#COVERAGE   ModPagespeedFileCachePath            "@@MODPAGESPEED_CACHE_ROOT@@-alt/cache/"
#COVERAGE   ModPagespeedGeneratedFilePrefix      "@@MODPAGESPEED_CACHE_ROOT@@-alt/files/"
#COVERAGE   ModPagespeedRewriteLevel PassThrough
#COVERAGE
#COVERAGE   # ModPagespeedSlurpDirectory ...
#COVERAGE   # ModPagespeedSlurpReadOnly on
#COVERAGE   
#COVERAGE   <Location /mod_pagespeed_message>
#COVERAGE        Allow from localhost
#COVERAGE        Allow from 127.0.0.1
#COVERAGE        SetHandler mod_pagespeed_message
#COVERAGE   </Location>
#COVERAGE </VirtualHost>


#PROXY # This is used for ProxyPass testing.
#PROXY #   See: http://code.google.com/p/modpagespeed/issues/detail?id=74
#PROXY # We use 2 servers for it, one doing rewriting and fetching
#PROXY # from the other one which does not have mod_pagespeed enabled.
#PROXY Listen 8081
#PROXY <VirtualHost *:8080>
#PROXY   # Host at 8080 should have no relevant content.
#PROXY   DocumentRoot  /tmp/
#PROXY
#PROXY   # Turn these declarations back on during testing if you are
#PROXY   # having trouble distinguishing which server is saying what.
#PROXY   #ErrorLog   "@@MODPAGESPEED_CACHE_ROOT@@/logs/error_log"
#PROXY   #CustomLog  "@@MODPAGESPEED_CACHE_ROOT@@/logs/access_log" common
#PROXY
#PROXY   ModPagespeed on
#PROXY
#PROXY   ModPagespeedFileCachePath         "@@MODPAGESPEED_CACHE_ROOT@@/cache/"
#PROXY   ModPagespeedGeneratedFilePrefix   "@@MODPAGESPEED_CACHE_ROOT@@/files/"
#PROXY
#PROXY   ModPagespeedRewriteLevel PassThrough
#PROXY   ModPagespeedEnableFilters extend_cache
#PROXY   ModPagespeedDomain *
#PROXY
#PROXY   # Proxy through to 8081.
#PROXY   ProxyPass / http://localhost:8081/
#PROXY </VirtualHost>
#PROXY
#PROXY <VirtualHost *:8081>
#PROXY   # Host at 8081 sees into mod_pagespeed_examples directory.
#PROXY   DocumentRoot  "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/"
#PROXY
#PROXY   #ErrorLog   "@@MODPAGESPEED_CACHE_ROOT@@-alt/logs/error_log"
#PROXY   #CustomLog  "@@MODPAGESPEED_CACHE_ROOT@@-alt/logs/access_log" common
#PROXY
#PROXY   ModPagespeed off
#PROXY   ModPagespeedFileCachePath        "@@MODPAGESPEED_CACHE_ROOT@@-alt/cache/"
#PROXY   ModPagespeedGeneratedFilePrefix  "@@MODPAGESPEED_CACHE_ROOT@@-alt/files/"
#PROXY   ModPagespeedRewriteLevel PassThrough
#PROXY </VirtualHost>

#SLURP # This is used for Slurp testing.
#SLURP ModPagespeedSlurpDirectory "@@APACHE_DOC_ROOT@@/mod_pagespeed_test/slurp"
#SLURP ModPagespeedSlurpReadOnly on

#SHARED_MEM_LOCKS ModPagespeedSharedMemoryLocks on

#HTTPS # This is used for testing https requests.
#HTTPS Include conf/extra/httpd-ssl.conf
#HTTPS <IfModule !ssl_module>
#HTTPS   LoadModule ssl_module @@APACHE_MODULES@@/mod_ssl.so
#HTTPS </IfModule>
#HTTPS SSLRandomSeed startup builtin
#HTTPS SSLRandomSeed connect builtin
#HTTPS ModPagespeedMapOriginDomain http://@@APACHE_DOMAIN@@ https://@@APACHE_HTTPS_DOMAIN@@
