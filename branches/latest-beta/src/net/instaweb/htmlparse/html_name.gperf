%{
// html_name.cc is automatically generated from html_name.gperf.
// Author: jmarantz@google.com

#include "base/logging.h"
#include "net/instaweb/htmlparse/public/html_name.h"
#include "net/instaweb/util/public/string_util.h"

namespace net_instaweb {
%}
%compare-strncmp
%define class-name KeywordMapper
%define lookup-function-name Lookup
%define word-array-name kHtmlNameTable
%global-table
%ignore-case
%includes
%language=C++
%readonly-tables
%struct-type

struct KeywordMap {const char* name; net_instaweb::HtmlName::Keyword keyword;};
%%
### These names can be used as element tags, or attribute names.  This is not
### a complete list of HTML names -- just the ones we want to scan for while
### rewriting.
"?xml",                 HtmlName::kXml
"a",                    HtmlName::kA
"alt",                  HtmlName::kAlt
"area",                 HtmlName::kArea
"async",                HtmlName::kAsync
"audio",                HtmlName::kAudio
"autocomplete",         HtmlName::kAutocomplete
"autofocus",            HtmlName::kAutofocus
"autoplay",             HtmlName::kAutoplay
"base",                 HtmlName::kBase
"body",                 HtmlName::kBody
"br",                   HtmlName::kBr
"button",               HtmlName::kButton
"charset",              HtmlName::kCharset
"checked",              HtmlName::kChecked
"class",                HtmlName::kClass
"col",                  HtmlName::kCol
"colgroup",             HtmlName::kColgroup
"colspan",              HtmlName::kColspan
"command",              HtmlName::kCommand
"content",              HtmlName::kContent
"controls",             HtmlName::kControls
"dd",                   HtmlName::kDd
"declare",              HtmlName::kDeclare
"defaultchecked",       HtmlName::kDefaultchecked
"defaultselected",      HtmlName::kDefaultselected
"defer",                HtmlName::kDefer
"details",              HtmlName::kDetails
"disabled",             HtmlName::kDisabled
"display",              HtmlName::kDisplay
"div",                  HtmlName::kDiv
"dt",                   HtmlName::kDt
"enctype",              HtmlName::kEnctype
"event",                HtmlName::kEvent
"for",                  HtmlName::kFor
"form",                 HtmlName::kForm
"formnovalidate",       HtmlName::kFormnovalidate
"frame",                HtmlName::kFrame
"frameborder",          HtmlName::kFrameborder
"head",                 HtmlName::kHead
"height",               HtmlName::kHeight
"hr",                   HtmlName::kHr
"href",                 HtmlName::kHref
"html",                 HtmlName::kHtml
"http-equiv",           HtmlName::kHttpEquiv
"id",                   HtmlName::kId
"iframe",               HtmlName::kIframe
"img",                  HtmlName::kImg
"indeterminate",        HtmlName::kIndeterminate
"input",                HtmlName::kInput
"ismap",                HtmlName::kIsmap
"keygen",               HtmlName::kKeygen
"keytype",              HtmlName::kKeytype
"lang",                 HtmlName::kLang
"language",             HtmlName::kLanguage
"li",                   HtmlName::kLi
"link",                 HtmlName::kLink
"loop",                 HtmlName::kLoop
"media",                HtmlName::kMedia
"menu",                 HtmlName::kMenu
"meta",                 HtmlName::kMeta
"method",               HtmlName::kMethod
"multiple",             HtmlName::kMultiple
"muted",                HtmlName::kMuted
"name",                 HtmlName::kName
"nohref",               HtmlName::kNohref
"noresize",             HtmlName::kNoresize
"noscript",             HtmlName::kNoscript
"novalidate",           HtmlName::kNovalidate
"object",               HtmlName::kObject
"ol",                   HtmlName::kOl
"onclick",              HtmlName::kOnclick
"open",                 HtmlName::kOpen
"optgroup",             HtmlName::kOptgroup
"option",               HtmlName::kOption
"other",                HtmlName::kOther
"p",                    HtmlName::kP
"param",                HtmlName::kParam
"pre",                  HtmlName::kPre
"readonly",             HtmlName::kReadonly
"rel",                  HtmlName::kRel
"required",             HtmlName::kRequired
"reversed",             HtmlName::kReversed
"rowspan",              HtmlName::kRowspan
"rp",                   HtmlName::kRp
"rt",                   HtmlName::kRt
"scoped",               HtmlName::kScoped
"script",               HtmlName::kScript
"scrolling",            HtmlName::kScrolling
"seamless",             HtmlName::kSeamless
"select",               HtmlName::kSelect
"selected",             HtmlName::kSelected
"shape",                HtmlName::kShape
"source",               HtmlName::kSource
"span",                 HtmlName::kSpan
"src",                  HtmlName::kSrc
"style",                HtmlName::kStyle
"tag",                  HtmlName::kTag
"tbody",                HtmlName::kTbody
"td",                   HtmlName::kTd
"test",                 HtmlName::kTest
"textarea",             HtmlName::kTextarea
"tfoot",                HtmlName::kTfoot
"th",                   HtmlName::kTh
"thead",                HtmlName::kThead
"tr",                   HtmlName::kTr
"type",                 HtmlName::kType
"valuetype",            HtmlName::kValuetype
"video",                HtmlName::kVideo
"wbr",                  HtmlName::kWbr
"width",                HtmlName::kWidth
"wrap",                 HtmlName::kWrap
%%

HtmlName::Keyword HtmlName::Lookup(const StringPiece& keyword) {
  const KeywordMap* keyword_map = KeywordMapper::Lookup(keyword.data(),
                                                        keyword.size());
  if (keyword_map != NULL) {
    return keyword_map->keyword;
  }
  return HtmlName::kNotAKeyword;
}

bool HtmlName::Iterator::AtEnd() const {
  return index_ > MAX_HASH_VALUE;
}

void HtmlName::Iterator::Next() {
  DCHECK(!AtEnd());
  ++index_;
  while (!AtEnd() && (*(kHtmlNameTable[index_].name) == '\0')) {
    ++index_;
  }
}

const char* HtmlName::Iterator::name() const {
  DCHECK(!AtEnd());
  return kHtmlNameTable[index_].name;
}

HtmlName::Keyword HtmlName::Iterator::keyword() const {
  DCHECK(!AtEnd());
  return kHtmlNameTable[index_].keyword;
}

int HtmlName::num_keywords() {
  return TOTAL_KEYWORDS;
}

}  // namespace net_instaweb
